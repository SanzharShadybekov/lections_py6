# PostgreSQL - Система управления базами данных(СУБД/DBMS)
# Это ряд программ и инструментов позволяющих создовать БД, управлять ею и манипулировать данными внутри(CRUD)

# Postgres - сама база данных, она объектно реляционная, то есть данные хранятся в виде таблиц, и таблицы имеют связи между собой

# SQL (Structured Query language) - декларативный язык структурированных запросов, он применяется для создания и получения данных при помощи запросов в БД

# ----------------------------
# команда для входа в бд через юзера postgres:
# sudo -u postgres psql

# команда для входа в своего юзера 
# psql

# создание суперюзера
# CREATE ROLE 'username' SUPERUSER LOGIN PASSWORD '1';

# изменение пароля
# ALTER USER 'username' WITH PASSWORD '1';

# создание бд
# CREATE DATABASE 'name';

# \l - список всех бд

# \du - все юзеры

# \c 'name' - команда для подколючения к бд

# \dt - все таблицы (нужно подлючиться к бд заранее)

# \d 'name' - подробная информация про таблицу (нужно подлючиться к бд заранее)

# psql -U <username> -d <dbname> -подключаемся под выбранным username к dbname

# --------------------------
# Типы полей в Postgres

# Numeric Types(числовые типы)
    # a. smallint(2 bytes) -> -32767 to 32767
    # b. integer(4 bytes) -> -2.147... to 2.147...
    # с. bigint(8 bytes) -> ...
    # d. real (4 bytes) -> число с плавающей точкой, вещественное 
    # f. serial (4 bytes) -> integer, auto-increment

# Character types(Символьные типы(строковые)):
    # a. varchar(кол-во символов) -> если мы укажеи 50 символов, а заполним только 10, то остальные будут свободны. Макс 255
    # b. char(кол-во символов) -> если мы укажеи 50 символов, а заполним только 10, то остальные будут заполнены пробелом. Макс 255
    # с. text() -> неогр кол-во символов

# Boolen Type
    # a. boolean(1 bytes) -> True/False

# date -> календарная дата (год.месяц.день)

# location -> координатная точка (x, y) - (245, -12)

# enumerate types:
    # ('a', 'b', 'c')   
    # CREATE TYPE <any name> AS ENUM ('Happy', 'Sad', 'Mad');

# -----------------------

# Команда для добавления данных в таблицу
# INSERT INTO <tablename> [(columns)] VALUES (data), (data);

# Команда для обновления данных
# UPDATE <table> SET <column> = <new_value> WHERE <column> = <value>;

# Команда для удаления данных
# DELETE FROM <table> WHERE <column> = <value>;


# Команда для получения данных
# SELECT (columns)* FROM <table>;

# ORDER BY: Позволяет нам сортировать выводящие данные по убыванию или возрастанию.  ASC(по возрастанию) и DESC(по убыванию)
# Cинтаксис: SELECT <row> FROM <tablename> ORDER BY <row> [ASC/DESC]

# WHERE: используется для фильтрации по полям. будут выводится только те данные которые соответсвуют условию оператора WHERE
# Cинтаксис: SELECT <row> FROM <tablename> WHERE  <row> = 'чему либо';

# BETWEEN: условие между
# SELECT * FROM products WHERE id BETWEEN 3 and 8

# AND оператор и, для множетсвенных условий 
# IN: WHERE <row> in (1,2,3,4);
# LIMIT: ставит ограничение в кол-во получаемых данных

# LIKE: Выводит результат который соответсвует введенному шаблону для строк. Чувствителен к регистру
# ILIKE: тоже самое только не зависит от регистра
# Cинтаксис: SELECT <row> FROM <tablename> WHERE  <row> LIKE/ILIKE 'чему либо';

# GROUP BY: разделяет данные которые мы получаем в SELECT, при этом группируя их по определенному признаку. И теперь для каждой группы иожно использовать функцию
# HAVING: ставит условие при помози которого данные отбираются в группировка
# ------- в тандеме 
# Агрегатные фукнции: AVG(), COUNT(), MIN(), MAX(), SUM()

# Экспорт бд(дамп):
# pg_dump -U <username> -d 'dbname' > 'file.sql'

# Импорт:
# psql -U <username> -d <dbname> -f <filename>

# ---------------------------------
# Ограничения: 
    # 1. NOT NULL - обязательно к заполнению
    # 2. UNIQUE - будут хранится только уникальные данные
    # 3. CHECK -> CHECK age > -1 - ограничение проверки на условие
    # 4. PRIMARY KEY(для установки идентификатора данных в таблице)
    # 5. FOREIGN KEY(для установки связей между таблицами)
    # 6. ON DELETE - для установки поведения при удаленнии данных которые были связаны

# -----------------------------------------
# JOIN: выборка данных из двух таблиц, соединение таблиц

# LEFT JOIN: выборка будет содержать все строки из левой таблицы

# RIGHT JOIN: выборка будет содержать все строки из правой таблицы

# SELECT p1.title, p1.price, o1.quantity, p1.price * o1.quantity as total_sum FROM products p1, orders o1 WHERE p1.id = o1.product_id; 
# - Запрос сразу в две таблицы

# SELECT p1.title, p1.price, o1.quantity, p1.price * o1.quantity as total_sum FROM products p1 JOIN orders o1 ON p1.id = o1.product_id;

# ---------------------------------
